#!/bin/sh

# Nagios plugin to compare the running kernel version with a desired one.
# Copyright (C) 2012-2017 Simon Deziel <simon@sdeziel.info>

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Example configuration
#
# This check needs to be installed on the monitoring target and executed through
# NRPE. If the desired kernel has a $(uname -rv) signature like:
#
#   3.2.0-30-virtual #48-Ubuntu SMP Fri Aug 24 17:12:24 UTC 2012
#
# then the NRPE config extract needed is:
#
# command[check_kernel]=/usr/lib/nagios/plugins/check_kernel -c '3.2.0-30.48'
#
# And the config extract to add to Nagios' config:
#
# define service {
#   use                 'generic-service'
#   service_description 'Kernel version'
#   check_command       'check_nrpe!check_kernel'
# }
#
# This plugin is useful to identify which machine require attention regarding
# kernel updates and reboots. It does not have a warning threshold since
# potentially every kernel update bring critical security fixes. Also, it makes
# no sense to warn if the running kernel is newer than the desired one since you
# could leverage this when non-critical kernel updates are released.

# Explicitly set the PATH to that of ENV_SUPATH in /etc/login.defs and unset
# various other variables. For details, see:
# https://wiki.ubuntu.com/SecurityTeam/AppArmorPolicyReview#Execute_rules
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export ENV=
export CDPATH=
export LC_ALL="C"

STATE_OK=0
STATE_CRITICAL=2
STATE_UNKNOWN=3
MSG_OK="KERNEL OK"
MSG_CRITICAL="KERNEL CRITICAL"
MSG_UNKNOWN="KERNEL UNKNOWN"
SCRIPT_NAME=$(basename "$0")

p_ok () {
  echo "$MSG_OK: $1"
  exit "$STATE_OK"
}
p_critical () {
  echo "$MSG_CRITICAL: $1"
  exit "$STATE_CRITICAL"
}
p_unknown () {
  echo "$MSG_UNKNOWN: $1"
  exit "$STATE_UNKNOWN"
}

usage () {
  cat << EOF
Copyright (C) 2012-2017 Simon Deziel

This plugin checks if the version of the running kernel is behind the desired one.

Usage:
  $SCRIPT_NAME -c <desired kernel version>
EOF
  exit 0
}

# Check arguments
if [ "$#" -ne 2 ]; then
  usage
elif [ "$1" != "-c" ]; then
  p_unknown "Wrong argument, see $SCRIPT_NAME -h for help"
fi

# Desired
DESIRED_VER="$2"
echo "$DESIRED_VER" | grep -q '^[0-9.~-]\+$' || p_unknown "Invalid desired kernel version"

# Running
[ -r "/proc/version_signature" ] || p_unknown "Unable to read /proc/version_signature"
RUNNING_VER="$(sed 's/.*\s\(\S\+\)\s.*/\1/;s/[a-zA-Z-]*$//' /proc/version_signature)"
[ -n "$RUNNING_VER" ] || p_unknown "Unable to get the version of the currently running kernel"

# Check if behind
which dpkg >/dev/null 2>&1 || p_unknown "Unable to find dpkg tool"
dpkg --compare-versions "$RUNNING_VER" lt "$DESIRED_VER" && p_critical "Running version ($RUNNING_VER) is behind desired one ($DESIRED_VER)"

p_ok "Running version ($RUNNING_VER) is greater or equal to the desired one ($DESIRED_VER)"
